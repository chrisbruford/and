!function(I){var g={};function C(A){if(g[A])return g[A].exports;var t=g[A]={i:A,l:!1,exports:{}};return I[A].call(t.exports,t,t.exports,C),t.l=!0,t.exports}C.m=I,C.c=g,C.d=function(I,g,A){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:A})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var t in I)C.d(A,t,function(g){return I[g]}.bind(null,t));return A},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/hackernews/hn.api.js\nclass HN {\n    getTopNews() {\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n            xhr.open(\'GET\', \'https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\');\n\n            xhr.onload = evt => {\n                if (xhr.status == 200 && xhr.responseText) {\n                    try {\n                        let data = JSON.parse(xhr.responseText);\n                        resolve(data);\n                    } catch (e) {\n                        reject({ error: e, data: xhr.responseText });\n                    }\n                } else {\n                    reject(`Unable to retrieve data: \\n server code: ${xhr.status} \\n responseText: ${xhr.responseText}`);\n                }\n            }\n\n            xhr.send();\n        });\n    }\n\n    getItem(itemID) {\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n            xhr.open(\'GET\', `https://hacker-news.firebaseio.com/v0/item/${itemID}.json?print=pretty`);\n\n            xhr.onload = evt => {\n                if (xhr.status == 200 && xhr.responseText) {\n                    try {\n                        let data = JSON.parse(xhr.responseText);\n                        resolve(data);\n                    } catch (e) {\n                        reject({ error: e, data: xhr.responseText });\n                    }\n                } else {\n                    reject(`Unable to retrieve data: \\n server code: ${xhr.status} \\n responseText: ${xhr.responseText}`);\n                }\n            }\n\n            xhr.send();\n        });\n    }\n}\n// CONCATENATED MODULE: ./src/date-helper/date-helper.js\nclass DateHelper {\n    timeAgo(time) {\n        let diff = Date.now() - time;\n\n        let answer = "Just now";\n        let secondsAgo = diff / 1000;\n\n        if (secondsAgo < 60) {\n            return answer;\n        }\n\n        let minutesAgo = secondsAgo / 60;\n        let unit = minutesAgo === 1 ? "minute":"minutes"\n        if (minutesAgo < 60) {\n            return `${Math.round(minutesAgo)} ${unit} ago`\n        }\n\n        let hoursAgo = minutesAgo / 60;\n        unit = hoursAgo === 1 ? "hour":"hours"\n\n        if (hoursAgo < 24) {\n            return `${Math.round(hoursAgo)} ${unit} ago`\n        }\n\n        let daysAgo = hoursAgo / 24;\n        unit = daysAgo === 1 ? "day" : "days";\n        return `${Math.round(daysAgo)} ${unit} ago`;\n\n    }\n}\n// CONCATENATED MODULE: ./src/index.js\n\n\n\nlet HNService = new HN();\nlet dateHelper = new DateHelper();\nlet hnItems = new Map();\n\n//initial load to pull in just top10 news items\n//and lazy-load top-level comments\n (async function loadTopNews() {\n    HNService.getTopNews()\n        .then(async newsIDs => {\n            newsIDs = newsIDs.slice(0, 10);\n\n            let listGroup = document.querySelector(\'.list-group\');\n            for (let id of newsIDs) {\n                await HNService.getItem(id)\n                    .then(async newsItem => {\n                        hnItems.set(newsItem.id, newsItem);\n                        newsItem.kids = newsItem.kids || [];\n                        let timeAgo = dateHelper.timeAgo(newsItem.time * 1000);\n\n                        let listItem = document.createElement(\'a\');\n                        listItem.href = newsItem.url\n                        listItem.className = `list-group-item list-group-item-action flex-column align-items-start`;\n                        listItem.id = `newsitem-${newsItem.id}`;\n\n                        listItem.innerHTML = `<div class="d-flex w-100 justify-content-between">\n                                                    <h5 class="mb-1">${newsItem.title}</h5>\n                                                    <small>${timeAgo}</small>\n                                                </div>\n                                                <small>${newsItem.score} points by ${newsItem.by}</small>\n                                                <p><a id="load-comments" href="#comments-${newsItem.id}" data-toggle="collapse" aria-expanded="false" aria-controls="comments-${newsItem.id}"><small>${newsItem.kids.length} comments</small></a></p>\n\n                                                <div class="collapse" id="comments-${newsItem.id}" data-parent="#newsitem-${newsItem.id}" >\n                                                <div class="list-group comments">\n                                                    \n                                                </div>\n                                                </div>\n                                                `;\n\n                        let target = listItem.querySelector(\'.comments\');\n                        listItem.querySelector(\'#load-comments\').addEventListener(\'click\', function () {\n                            loadComments(newsItem.id, target);\n                        })\n\n                        listGroup.appendChild(listItem);\n                    });\n            }\n        })\n        .catch(console.error);\n})();\n\n//load comments with link to recursively load sub-comments\nasync function loadComments(id, target) {\n    //only load into empty containers (cheap way to stop re-loading unnecesserily)\n    if (target.children && target.children.length > 0) {return}\n\n    let item = hnItems.get(id);\n    let ids = item ? item.kids || [] : [];\n\n    for (let id of ids) {\n        await HNService.getItem(id)\n            .then(comment => {\n                hnItems.set(comment.id,comment);\n                comment.kids = comment.kids || [];\n                let timeAgo = dateHelper.timeAgo(comment.time * 1000);\n\n                let div = document.createElement(\'div\');\n                div.className = `list-group-item list-group-item-action flex-column align-items-start`;\n                div.id = `comment-${comment.id}`;\n                div.innerHTML = `\n                    <div class="d-flex w-100 justify-content-between">\n                        <h5 class="mb-1">${comment.by}</h5>\n                        <small>${timeAgo}</small>\n                    </div>\n                    <p>${comment.text}</p>\n                    <p><a id="load-comments-${comment.id}" href="#comments-${comment.id}" data-toggle="collapse" aria-expanded="false" aria-controls="comments-${comment.id}"><small>${comment.kids.length} comments</small></a></p>\n                    <div class="collapse" id="comments-${comment.id}" data-parent="#comment-${comment.id}">\n                        <div class="list-group comments">\n                            \n                        </div>\n                    </div>\n                    `;\n\n                div.querySelector(`#load-comments-${comment.id}`).addEventListener(\'click\', function () {\n                    loadComments(comment.id, div.querySelector(\'.comments\'));\n                });\n                target.appendChild(div);\n            });\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGFja2VybmV3cy9obi5hcGkuanM/MWNlNSIsIndlYnBhY2s6Ly8vLi9zcmMvZGF0ZS1oZWxwZXIvZGF0ZS1oZWxwZXIuanM/YTcxNCIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsZ0NBQWdDLG1DQUFtQztBQUNuRTtBQUNBLGlCQUFpQjtBQUNqQix1RUFBdUUsV0FBVyxvQkFBb0IsaUJBQWlCO0FBQ3ZIO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLE9BQU87O0FBRWpGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsZ0NBQWdDLG1DQUFtQztBQUNuRTtBQUNBLGlCQUFpQjtBQUNqQix1RUFBdUUsV0FBVyxvQkFBb0IsaUJBQWlCO0FBQ3ZIO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxDOztBQzVDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHVCQUF1QixHQUFHLEtBQUs7QUFDckQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixxQkFBcUIsR0FBRyxLQUFLO0FBQ25EOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CLEdBQUcsS0FBSzs7QUFFOUM7QUFDQSxDOztBQzdCYTtBQUNROztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxZQUFZOztBQUU5RDtBQUNBLHVFQUF1RSxlQUFlO0FBQ3RGLDZEQUE2RCxRQUFRO0FBQ3JFO0FBQ0EseURBQXlELGVBQWUsYUFBYSxZQUFZO0FBQ2pHLDJGQUEyRixZQUFZLHlFQUF5RSxZQUFZLFdBQVcscUJBQXFCOztBQUU1TixxRkFBcUYsWUFBWSwyQkFBMkIsWUFBWTtBQUN4STs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLFNBQVM7QUFDVDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEOztBQUV4RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0NBQW9DLFdBQVc7QUFDL0M7QUFDQTtBQUNBLDJDQUEyQyxXQUFXO0FBQ3RELGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0EseUJBQXlCLGFBQWE7QUFDdEMsOENBQThDLFdBQVcsb0JBQW9CLFdBQVcseUVBQXlFLFdBQVcsV0FBVyxvQkFBb0I7QUFDM00seURBQXlELFdBQVcsMEJBQTBCLFdBQVc7QUFDekc7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9EQUFvRCxXQUFXO0FBQy9EO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBITiB7XG4gICAgZ2V0VG9wTmV3cygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCAnaHR0cHM6Ly9oYWNrZXItbmV3cy5maXJlYmFzZWlvLmNvbS92MC90b3BzdG9yaWVzLmpzb24/cHJpbnQ9cHJldHR5Jyk7XG5cbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBldnQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCAmJiB4aHIucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoeyBlcnJvcjogZSwgZGF0YTogeGhyLnJlc3BvbnNlVGV4dCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChgVW5hYmxlIHRvIHJldHJpZXZlIGRhdGE6IFxcbiBzZXJ2ZXIgY29kZTogJHt4aHIuc3RhdHVzfSBcXG4gcmVzcG9uc2VUZXh0OiAke3hoci5yZXNwb25zZVRleHR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRJdGVtKGl0ZW1JRCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIGBodHRwczovL2hhY2tlci1uZXdzLmZpcmViYXNlaW8uY29tL3YwL2l0ZW0vJHtpdGVtSUR9Lmpzb24/cHJpbnQ9cHJldHR5YCk7XG5cbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBldnQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCAmJiB4aHIucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoeyBlcnJvcjogZSwgZGF0YTogeGhyLnJlc3BvbnNlVGV4dCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChgVW5hYmxlIHRvIHJldHJpZXZlIGRhdGE6IFxcbiBzZXJ2ZXIgY29kZTogJHt4aHIuc3RhdHVzfSBcXG4gcmVzcG9uc2VUZXh0OiAke3hoci5yZXNwb25zZVRleHR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIERhdGVIZWxwZXIge1xuICAgIHRpbWVBZ28odGltZSkge1xuICAgICAgICBsZXQgZGlmZiA9IERhdGUubm93KCkgLSB0aW1lO1xuXG4gICAgICAgIGxldCBhbnN3ZXIgPSBcIkp1c3Qgbm93XCI7XG4gICAgICAgIGxldCBzZWNvbmRzQWdvID0gZGlmZiAvIDEwMDA7XG5cbiAgICAgICAgaWYgKHNlY29uZHNBZ28gPCA2MCkge1xuICAgICAgICAgICAgcmV0dXJuIGFuc3dlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtaW51dGVzQWdvID0gc2Vjb25kc0FnbyAvIDYwO1xuICAgICAgICBsZXQgdW5pdCA9IG1pbnV0ZXNBZ28gPT09IDEgPyBcIm1pbnV0ZVwiOlwibWludXRlc1wiXG4gICAgICAgIGlmIChtaW51dGVzQWdvIDwgNjApIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbnV0ZXNBZ28pfSAke3VuaXR9IGFnb2BcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBob3Vyc0FnbyA9IG1pbnV0ZXNBZ28gLyA2MDtcbiAgICAgICAgdW5pdCA9IGhvdXJzQWdvID09PSAxID8gXCJob3VyXCI6XCJob3Vyc1wiXG5cbiAgICAgICAgaWYgKGhvdXJzQWdvIDwgMjQpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKGhvdXJzQWdvKX0gJHt1bml0fSBhZ29gXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGF5c0FnbyA9IGhvdXJzQWdvIC8gMjQ7XG4gICAgICAgIHVuaXQgPSBkYXlzQWdvID09PSAxID8gXCJkYXlcIiA6IFwiZGF5c1wiO1xuICAgICAgICByZXR1cm4gYCR7TWF0aC5yb3VuZChkYXlzQWdvKX0gJHt1bml0fSBhZ29gO1xuXG4gICAgfVxufSIsImltcG9ydCB7IEhOIH0gZnJvbSAnLi9oYWNrZXJuZXdzL2huLmFwaSc7XG5pbXBvcnQgeyBEYXRlSGVscGVyIH0gZnJvbSAnLi9kYXRlLWhlbHBlci9kYXRlLWhlbHBlcic7XG5cbmxldCBITlNlcnZpY2UgPSBuZXcgSE4oKTtcbmxldCBkYXRlSGVscGVyID0gbmV3IERhdGVIZWxwZXIoKTtcbmxldCBobkl0ZW1zID0gbmV3IE1hcCgpO1xuXG4vL2luaXRpYWwgbG9hZCB0byBwdWxsIGluIGp1c3QgdG9wMTAgbmV3cyBpdGVtc1xuLy9hbmQgbGF6eS1sb2FkIHRvcC1sZXZlbCBjb21tZW50c1xuIChhc3luYyBmdW5jdGlvbiBsb2FkVG9wTmV3cygpIHtcbiAgICBITlNlcnZpY2UuZ2V0VG9wTmV3cygpXG4gICAgICAgIC50aGVuKGFzeW5jIG5ld3NJRHMgPT4ge1xuICAgICAgICAgICAgbmV3c0lEcyA9IG5ld3NJRHMuc2xpY2UoMCwgMTApO1xuXG4gICAgICAgICAgICBsZXQgbGlzdEdyb3VwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3QtZ3JvdXAnKTtcbiAgICAgICAgICAgIGZvciAobGV0IGlkIG9mIG5ld3NJRHMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBITlNlcnZpY2UuZ2V0SXRlbShpZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgbmV3c0l0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG5JdGVtcy5zZXQobmV3c0l0ZW0uaWQsIG5ld3NJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld3NJdGVtLmtpZHMgPSBuZXdzSXRlbS5raWRzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpbWVBZ28gPSBkYXRlSGVscGVyLnRpbWVBZ28obmV3c0l0ZW0udGltZSAqIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbS5ocmVmID0gbmV3c0l0ZW0udXJsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbS5jbGFzc05hbWUgPSBgbGlzdC1ncm91cC1pdGVtIGxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24gZmxleC1jb2x1bW4gYWxpZ24taXRlbXMtc3RhcnRgO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW0uaWQgPSBgbmV3c2l0ZW0tJHtuZXdzSXRlbS5pZH1gO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbS5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cImQtZmxleCB3LTEwMCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cIm1iLTFcIj4ke25ld3NJdGVtLnRpdGxlfTwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPiR7dGltZUFnb308L3NtYWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGw+JHtuZXdzSXRlbS5zY29yZX0gcG9pbnRzIGJ5ICR7bmV3c0l0ZW0uYnl9PC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxhIGlkPVwibG9hZC1jb21tZW50c1wiIGhyZWY9XCIjY29tbWVudHMtJHtuZXdzSXRlbS5pZH1cIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1jb250cm9scz1cImNvbW1lbnRzLSR7bmV3c0l0ZW0uaWR9XCI+PHNtYWxsPiR7bmV3c0l0ZW0ua2lkcy5sZW5ndGh9IGNvbW1lbnRzPC9zbWFsbD48L2E+PC9wPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sbGFwc2VcIiBpZD1cImNvbW1lbnRzLSR7bmV3c0l0ZW0uaWR9XCIgZGF0YS1wYXJlbnQ9XCIjbmV3c2l0ZW0tJHtuZXdzSXRlbS5pZH1cIiA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdC1ncm91cCBjb21tZW50c1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKCcuY29tbWVudHMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJyNsb2FkLWNvbW1lbnRzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZENvbW1lbnRzKG5ld3NJdGVtLmlkLCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEdyb3VwLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcbn0pKCk7XG5cbi8vbG9hZCBjb21tZW50cyB3aXRoIGxpbmsgdG8gcmVjdXJzaXZlbHkgbG9hZCBzdWItY29tbWVudHNcbmFzeW5jIGZ1bmN0aW9uIGxvYWRDb21tZW50cyhpZCwgdGFyZ2V0KSB7XG4gICAgLy9vbmx5IGxvYWQgaW50byBlbXB0eSBjb250YWluZXJzIChjaGVhcCB3YXkgdG8gc3RvcCByZS1sb2FkaW5nIHVubmVjZXNzZXJpbHkpXG4gICAgaWYgKHRhcmdldC5jaGlsZHJlbiAmJiB0YXJnZXQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge3JldHVybn1cblxuICAgIGxldCBpdGVtID0gaG5JdGVtcy5nZXQoaWQpO1xuICAgIGxldCBpZHMgPSBpdGVtID8gaXRlbS5raWRzIHx8IFtdIDogW107XG5cbiAgICBmb3IgKGxldCBpZCBvZiBpZHMpIHtcbiAgICAgICAgYXdhaXQgSE5TZXJ2aWNlLmdldEl0ZW0oaWQpXG4gICAgICAgICAgICAudGhlbihjb21tZW50ID0+IHtcbiAgICAgICAgICAgICAgICBobkl0ZW1zLnNldChjb21tZW50LmlkLGNvbW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbW1lbnQua2lkcyA9IGNvbW1lbnQua2lkcyB8fCBbXTtcbiAgICAgICAgICAgICAgICBsZXQgdGltZUFnbyA9IGRhdGVIZWxwZXIudGltZUFnbyhjb21tZW50LnRpbWUgKiAxMDAwKTtcblxuICAgICAgICAgICAgICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gYGxpc3QtZ3JvdXAtaXRlbSBsaXN0LWdyb3VwLWl0ZW0tYWN0aW9uIGZsZXgtY29sdW1uIGFsaWduLWl0ZW1zLXN0YXJ0YDtcbiAgICAgICAgICAgICAgICBkaXYuaWQgPSBgY29tbWVudC0ke2NvbW1lbnQuaWR9YDtcbiAgICAgICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IHctMTAwIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XCJtYi0xXCI+JHtjb21tZW50LmJ5fTwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGw+JHt0aW1lQWdvfTwvc21hbGw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8cD4ke2NvbW1lbnQudGV4dH08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwPjxhIGlkPVwibG9hZC1jb21tZW50cy0ke2NvbW1lbnQuaWR9XCIgaHJlZj1cIiNjb21tZW50cy0ke2NvbW1lbnQuaWR9XCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGFyaWEtY29udHJvbHM9XCJjb21tZW50cy0ke2NvbW1lbnQuaWR9XCI+PHNtYWxsPiR7Y29tbWVudC5raWRzLmxlbmd0aH0gY29tbWVudHM8L3NtYWxsPjwvYT48L3A+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xsYXBzZVwiIGlkPVwiY29tbWVudHMtJHtjb21tZW50LmlkfVwiIGRhdGEtcGFyZW50PVwiI2NvbW1lbnQtJHtjb21tZW50LmlkfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAgY29tbWVudHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgYDtcblxuICAgICAgICAgICAgICAgIGRpdi5xdWVyeVNlbGVjdG9yKGAjbG9hZC1jb21tZW50cy0ke2NvbW1lbnQuaWR9YCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRDb21tZW50cyhjb21tZW50LmlkLCBkaXYucXVlcnlTZWxlY3RvcignLmNvbW1lbnRzJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')}]);